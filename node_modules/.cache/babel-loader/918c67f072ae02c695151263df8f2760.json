{"ast":null,"code":"// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\nconst INFURA_ID = \"\";\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    // required\n    options: {\n      infuraId: INFURA_ID,\n      // required\n      rpc: {\n        1: \"https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\" // Etherium C-Chain\n\n      }\n    }\n  }\n};\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const CONFIG = await configResponse.json();\n    const {\n      ethereum\n    } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\"\n        });\n\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(abi, CONFIG.CONTRACT_ADDRESS);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3\n          })); // Add listeners start\n\n          ethereum.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\nexport const connectWallet = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n\n    try {\n      const abiResponse = await fetch(\"/config/abi.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const abi = await abiResponse.json();\n      const configResponse = await fetch(\"/config/config.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\"\n        }\n      });\n      const CONFIG = await configResponse.json();\n      localStorage.removeItem(\"walletconnect\");\n      localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\",\n        // optional\n        cacheProvider: false,\n        // optional\n        providerOptions // required\n\n      });\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n      Web3EthContract.setProvider(provider);\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await provider.request({\n        method: \"net_version\"\n      });\n\n      if (networkId == CONFIG.NETWORK_ID_WALLET || networkId == CONFIG.NETWORK.ID) {\n        const SmartContractObj = new Web3EthContract(abi, CONFIG.CONTRACT_ADDRESS);\n        dispatch(connectSuccess({\n          account: accounts[0],\n          smartContract: SmartContractObj,\n          web3: web3\n        })); // Add listeners start\n\n        provider.on(\"accountsChanged\", accounts => {\n          dispatch(updateAccount(accounts[0]));\n        });\n        provider.on(\"chainChanged\", () => {\n          window.location.reload();\n        }); // Add listeners end\n      } else {\n        dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n      }\n    } catch (err) {\n      console.log(\"error\", err, \" message\", err.message);\n\n      if (typeof err !== \"undefined\" && typeof err.message !== \"undefined\" && err.message.includes(\"User Rejected\")) {\n        dispatch(connectFailed(\"User rejected the request\"));\n      } else if ((typeof err === \"string\" || err instanceof String) && err.includes(\"Modal closed by user\")) {\n        dispatch(connectFailed(\"Modal closed by user\"));\n      } else {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"sources":["/home/waleed/Desktop/MintWebsites/Mint-Nfts-dapp/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","Web3Modal","WalletConnectProvider","WalletLink","fetchData","INFURA_ID","providerOptions","walletconnect","package","options","infuraId","rpc","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","abiResponse","fetch","headers","Accept","abi","json","configResponse","CONFIG","ethereum","window","metamaskIsInstalled","isMetaMask","setProvider","web3","accounts","request","method","networkId","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","account","smartContract","on","updateAccount","location","reload","NAME","err","connectWallet","localStorage","removeItem","web3Modal","network","cacheProvider","provider","eth","getAccounts","NETWORK_ID_WALLET","console","log","message","includes","String"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,qBAAP,MAAkC,8BAAlC;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,MAAMC,SAAS,GAAG,EAAlB;AAEA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,aAAa,EAAE;AACbC,IAAAA,OAAO,EAAEN,qBADI;AACmB;AAChCO,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAEL,SADH;AACc;AACrBM,MAAAA,GAAG,EAAE;AACH,WAAG,+DADA,CACiE;;AADjE;AAFE;AAFI;AADO,CAAxB;;AAYA,MAAMC,cAAc,GAAG,MAAM;AAC3B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,cAAc,GAAIC,OAAD,IAAa;AAClC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,aAAa,GAAID,OAAD,IAAa;AACjC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAME,oBAAoB,GAAIF,OAAD,IAAa;AACxC,SAAO;AACLF,IAAAA,IAAI,EAAE,gBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO,MAAOC,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;AACA,UAAMQ,WAAW,GAAG,MAAMC,KAAK,CAAC,kBAAD,EAAqB;AAClDC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AADyC,KAArB,CAA/B;AAMA,UAAMC,GAAG,GAAG,MAAMJ,WAAW,CAACK,IAAZ,EAAlB;AACA,UAAMC,cAAc,GAAG,MAAML,KAAK,CAAC,qBAAD,EAAwB;AACxDC,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,MAAM,EAAE;AAFD;AAD+C,KAAxB,CAAlC;AAMA,UAAMI,MAAM,GAAG,MAAMD,cAAc,CAACD,IAAf,EAArB;AACA,UAAM;AAAEG,MAAAA;AAAF,QAAeC,MAArB;AACA,UAAMC,mBAAmB,GAAGF,QAAQ,IAAIA,QAAQ,CAACG,UAAjD;;AACA,QAAID,mBAAJ,EAAyB;AACvB/B,MAAAA,eAAe,CAACiC,WAAhB,CAA4BJ,QAA5B;AACA,UAAIK,IAAI,GAAG,IAAIjC,IAAJ,CAAS4B,QAAT,CAAX;;AACA,UAAI;AACF,cAAMM,QAAQ,GAAG,MAAMN,QAAQ,CAACO,OAAT,CAAiB;AACtCC,UAAAA,MAAM,EAAE;AAD8B,SAAjB,CAAvB;AAGA,cAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACO,OAAT,CAAiB;AACvCC,UAAAA,MAAM,EAAE;AAD+B,SAAjB,CAAxB;;AAGA,YAAIC,SAAS,IAAIV,MAAM,CAACW,OAAP,CAAeC,EAAhC,EAAoC;AAClC,gBAAMC,gBAAgB,GAAG,IAAIzC,eAAJ,CACvByB,GADuB,EAEvBG,MAAM,CAACc,gBAFgB,CAAzB;AAIAtB,UAAAA,QAAQ,CACNL,cAAc,CAAC;AACb4B,YAAAA,OAAO,EAAER,QAAQ,CAAC,CAAD,CADJ;AAEbS,YAAAA,aAAa,EAAEH,gBAFF;AAGbP,YAAAA,IAAI,EAAEA;AAHO,WAAD,CADR,CAAR,CALkC,CAYlC;;AACAL,UAAAA,QAAQ,CAACgB,EAAT,CAAY,iBAAZ,EAAgCV,QAAD,IAAc;AAC3Cf,YAAAA,QAAQ,CAAC0B,aAAa,CAACX,QAAQ,CAAC,CAAD,CAAT,CAAd,CAAR;AACD,WAFD;AAGAN,UAAAA,QAAQ,CAACgB,EAAT,CAAY,cAAZ,EAA4B,MAAM;AAChCf,YAAAA,MAAM,CAACiB,QAAP,CAAgBC,MAAhB;AACD,WAFD,EAhBkC,CAmBlC;AACD,SApBD,MAoBO;AACL5B,UAAAA,QAAQ,CAACH,aAAa,CAAE,qBAAoBW,MAAM,CAACW,OAAP,CAAeU,IAAK,GAA1C,CAAd,CAAR;AACD;AACF,OA9BD,CA8BE,OAAOC,GAAP,EAAY;AACZ9B,QAAAA,QAAQ,CAACH,aAAa,CAAC,uBAAD,CAAd,CAAR;AACD;AACF,KApCD,MAoCO;AACLG,MAAAA,QAAQ,CAACH,aAAa,CAAC,mBAAD,CAAd,CAAR;AACD;AACF,GAzDD;AA0DD,CA3DM;AA8DP,OAAO,MAAMkC,aAAa,GAAG,MAAM;AACjC,SAAO,MAAO/B,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACP,cAAc,EAAf,CAAR;;AACA,QAAI;AACF,YAAMQ,WAAW,GAAG,MAAMC,KAAK,CAAC,kBAAD,EAAqB;AAClDC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AADyC,OAArB,CAA/B;AAMA,YAAMC,GAAG,GAAG,MAAMJ,WAAW,CAACK,IAAZ,EAAlB;AACA,YAAMC,cAAc,GAAG,MAAML,KAAK,CAAC,qBAAD,EAAwB;AACxDC,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEPC,UAAAA,MAAM,EAAE;AAFD;AAD+C,OAAxB,CAAlC;AAMA,YAAMI,MAAM,GAAG,MAAMD,cAAc,CAACD,IAAf,EAArB;AACA0B,MAAAA,YAAY,CAACC,UAAb,CAAwB,eAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,+BAAxB;AACA,YAAMC,SAAS,GAAG,IAAIpD,SAAJ,CAAc;AAC9BqD,QAAAA,OAAO,EAAE,SADqB;AACV;AACpBC,QAAAA,aAAa,EAAE,KAFe;AAER;AACtBjD,QAAAA,eAH8B,CAGb;;AAHa,OAAd,CAAlB;AAKA,YAAMkD,QAAQ,GAAG,MAAMH,SAAS,CAACnC,OAAV,EAAvB;AACA,YAAMe,IAAI,GAAG,IAAIjC,IAAJ,CAASwD,QAAT,CAAb;AAEAzD,MAAAA,eAAe,CAACiC,WAAhB,CAA4BwB,QAA5B;AACA,YAAMtB,QAAQ,GAAG,MAAMD,IAAI,CAACwB,GAAL,CAASC,WAAT,EAAvB;AACA,YAAMrB,SAAS,GAAG,MAAMmB,QAAQ,CAACrB,OAAT,CAAiB;AACvCC,QAAAA,MAAM,EAAE;AAD+B,OAAjB,CAAxB;;AAGA,UAAIC,SAAS,IAAIV,MAAM,CAACgC,iBAApB,IAAyCtB,SAAS,IAAIV,MAAM,CAACW,OAAP,CAAeC,EAAzE,EAA6E;AAC3E,cAAMC,gBAAgB,GAAG,IAAIzC,eAAJ,CACvByB,GADuB,EAEvBG,MAAM,CAACc,gBAFgB,CAAzB;AAIAtB,QAAAA,QAAQ,CACNL,cAAc,CAAC;AACb4B,UAAAA,OAAO,EAAER,QAAQ,CAAC,CAAD,CADJ;AAEbS,UAAAA,aAAa,EAAEH,gBAFF;AAGbP,UAAAA,IAAI,EAAEA;AAHO,SAAD,CADR,CAAR,CAL2E,CAY3E;;AACAuB,QAAAA,QAAQ,CAACZ,EAAT,CAAY,iBAAZ,EAAgCV,QAAD,IAAc;AAC3Cf,UAAAA,QAAQ,CAAC0B,aAAa,CAACX,QAAQ,CAAC,CAAD,CAAT,CAAd,CAAR;AACD,SAFD;AAGAsB,QAAAA,QAAQ,CAACZ,EAAT,CAAY,cAAZ,EAA4B,MAAM;AAChCf,UAAAA,MAAM,CAACiB,QAAP,CAAgBC,MAAhB;AACD,SAFD,EAhB2E,CAmB3E;AACD,OApBD,MAoBO;AACL5B,QAAAA,QAAQ,CAACH,aAAa,CAAE,qBAAoBW,MAAM,CAACW,OAAP,CAAeU,IAAK,GAA1C,CAAd,CAAR;AACD;AACF,KArDD,CAqDE,OAAOC,GAAP,EAAY;AACZW,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBZ,GAArB,EAA0B,UAA1B,EAAsCA,GAAG,CAACa,OAA1C;;AACA,UACE,OAAOb,GAAP,KAAe,WAAf,IACA,OAAOA,GAAG,CAACa,OAAX,KAAuB,WADvB,IAEAb,GAAG,CAACa,OAAJ,CAAYC,QAAZ,CAAqB,eAArB,CAHF,EAIE;AACA5C,QAAAA,QAAQ,CAACH,aAAa,CAAC,2BAAD,CAAd,CAAR;AACD,OAND,MAMO,IACL,CAAC,OAAOiC,GAAP,KAAe,QAAf,IAA2BA,GAAG,YAAYe,MAA3C,KACAf,GAAG,CAACc,QAAJ,CAAa,sBAAb,CAFK,EAGL;AACA5C,QAAAA,QAAQ,CAACH,aAAa,CAAC,sBAAD,CAAd,CAAR;AACD,OALM,MAKA;AACLG,QAAAA,QAAQ,CAACH,aAAa,CAAC,uBAAD,CAAd,CAAR;AACD;AACF;AACF,GAxED;AAyED,CA1EM;AA4EP,OAAO,MAAM6B,aAAa,GAAIH,OAAD,IAAa;AACxC,SAAO,MAAOvB,QAAP,IAAoB;AACzBA,IAAAA,QAAQ,CAACF,oBAAoB,CAAC;AAAEyB,MAAAA,OAAO,EAAEA;AAAX,KAAD,CAArB,CAAR;AACAvB,IAAAA,QAAQ,CAACf,SAAS,CAACsC,OAAD,CAAV,CAAR;AACD,GAHD;AAID,CALM","sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\nimport Web3Modal from \"web3modal\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\n\n// log\nimport { fetchData } from \"../data/dataActions\";\n\nconst INFURA_ID = \"\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider, // required\n    options: {\n      infuraId: INFURA_ID, // required\n      rpc: {\n        1: \"https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161\", // Etherium C-Chain\n      },\n    },\n  },\n};\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      try {\n        const accounts = await ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await ethereum.request({\n          method: \"net_version\",\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(\n            abi,\n            CONFIG.CONTRACT_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\n\nexport const connectWallet = () => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    try {\n      const abiResponse = await fetch(\"/config/abi.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      });\n      const abi = await abiResponse.json();\n      const configResponse = await fetch(\"/config/config.json\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n        },\n      });\n      const CONFIG = await configResponse.json();\n      localStorage.removeItem(\"walletconnect\");\n      localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n      const web3Modal = new Web3Modal({\n        network: \"mainnet\", // optional\n        cacheProvider: false, // optional\n        providerOptions, // required\n      });\n      const provider = await web3Modal.connect();\n      const web3 = new Web3(provider);\n\n      Web3EthContract.setProvider(provider);\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await provider.request({\n        method: \"net_version\",\n      });\n      if (networkId == CONFIG.NETWORK_ID_WALLET || networkId == CONFIG.NETWORK.ID) {\n        const SmartContractObj = new Web3EthContract(\n          abi,\n          CONFIG.CONTRACT_ADDRESS\n        );\n        dispatch(\n          connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3,\n          })\n        );\n        // Add listeners start\n        provider.on(\"accountsChanged\", (accounts) => {\n          dispatch(updateAccount(accounts[0]));\n        });\n        provider.on(\"chainChanged\", () => {\n          window.location.reload();\n        });\n        // Add listeners end\n      } else {\n        dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n      }\n    } catch (err) {\n      console.log(\"error\", err, \" message\", err.message);\n      if (\n        typeof err !== \"undefined\" &&\n        typeof err.message !== \"undefined\" &&\n        err.message.includes(\"User Rejected\")\n      ) {\n        dispatch(connectFailed(\"User rejected the request\"));\n      } else if (\n        (typeof err === \"string\" || err instanceof String) &&\n        err.includes(\"Modal closed by user\")\n      ) {\n        dispatch(connectFailed(\"Modal closed by user\"));\n      } else {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}